<project name="Robotlegs-Tool" default="init project" basedir="../">

	<!--
	User specific the global configuration properties.
	-->
	<property file="ant-tools/config/project.properties" />
	<property file="ant-tools/config/log.properties" />
	<property file="ant-tools/config/build.properties" />

	<target name="main" depends="create directories" />

	<!-- 
	create default RobotLegs directories 
	-->
	<target name="create directories">
		<echo>Create Robotlegs folder structure</echo>
		<mkdir dir="${projectCompletePath}" />
		<mkdir dir="${projectCompletePath}/${view.dir}" />
		<mkdir dir="${projectCompletePath}/${model.dir}" />
		<mkdir dir="${projectCompletePath}/${command.dir}" />
		<mkdir dir="${projectCompletePath}/${services.dir}" />
		<mkdir dir="${src.dir}/${namespace.dir}/${utils.dir}" />
		<mkdir dir="${src.dir}/${namespace.dir}/${helper.dir}" />
	</target>

	<target name="copy config file">
		<copy file="${configFile.path}" tofile="${src.dir}/${libsApp.dir}/${configFile.dir}/${configFile.name}" />
	</target>

	<target name="create main container">
		<mkdir dir="${maincontainer.dir}" />
		<copy file="${maincontainer.mxml.file}" tofile="${maincontainer.dir}/${maincontainer.mxml.file.name}" />
		<copy file="${maincontainer.event.file}" tofile="${maincontainer.dir}/${maincontainer.event.file.name}">
			<filterchain>
				<replacetokens>
					<token key="namespace" value="${namespace.class}" />
				</replacetokens>
			</filterchain>
		</copy>
		<copy file="${maincontainer.mediator.file}" tofile="${maincontainer.dir}/${maincontainer.mediator.file.name}">
			<filterchain>
				<replacetokens>
					<token key="namespace" value="${namespace.class}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="copy application context file">
		<copy file="${application.file}" tofile="${projectCompletePath}/ApplicationContext.as">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace.class}" />
					<token key="year" value="${year}" />
					<token key="robotlegs.dir" value="${robotlegs.dir}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="copy main mxml file">
		<copy file="${applicationMXML.file}" tofile="${src.dir}/${applicationMXML.name}">
			<filterchain>
				<replacetokens>
					<token key="namespace" value="${namespace.class}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="copy start command">
		<copy file="${startupCommand.file}" tofile="${commandComplete.dir}/${startupCommand.file.name}">
			<filterchain>
				<replacetokens>
					<token key="namespace" value="${namespace.class}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>
	
	<!-- ================================= 
          target: copy main css file              
         ================================= -->
    <target name="copy main css file">
    	<copy file="${robotlegs.templates.dir}/Main.css" tofile="${src.dir}/Main.css" />
    </target>


	<!-- ================================= 
          target: init project           
         ================================= -->
	<target name="init project">
		<antcall target="create directories" />
		<antcall target="copy config file" />
		<antcall target="create main container" />
		<antcall target="copy application context file" />
		<antcall target="copy main mxml file" />
		<antcall target="copy start command" />
		<antcall target="copy main css file"></antcall>
	</target>

	<!-- add-command -->
	<target name="add-command">

		<echo>${log.create.commmand.message}</echo>
		
		<input message="Command Name" addproperty="commandName" />
				
		<convertToUpperCase property="upperCaseGesture" value="${commandName}" />
		<convertToLowerCase property="lowerCaseGesture" value="${commandName}" />

		<copy file="${robotlegs.templates.dir}/Command.as" tofile="${commandComplete.dir}/${commandName}Command.as">
			<filterchain>
				<replacetokens>
					<token key="namespace" value="${namespace.class}" />
					<token key="gesture" value="${commandName}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="add-event-command-user-gesture">

		<echo>${log.add.event.commmand.message}</echo>
		
		<input message="Command Name" addproperty="commandName" />
		
		<convertToUpperCase property="upperCaseGesture" value="${commandName}" />
		<convertToLowerCase property="lowerCaseGesture" value="${commandName}" />

		<copy file="${robotlegs.templates.dir}/CommandWithEvent.as" tofile="${commandComplete.dir}/${commandName}Command.as">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/Event.as" tofile="${project.url}/${events.dir}/${gesture}Event.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register command with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: add commands" value="// todo: add commands${line.separator}
			        commandMap.mapEvent(${gesture}Event.${upperCaseGesture}_EVENT, ${gesture}Command, ${gesture}Event);" />
	</target>

	<target name="add-event-command-service-user-gesture">

		<echo>${log.add.event.commmand.services.message}</echo>

		<convertToUpperCase property="upperCaseGesture" value="${gesture}" />
		<convertToLowerCase property="lowerCaseGesture" value="${gesture}" />

		<copy file="${robotlegs.templates.dir}/ResultCommand.as" tofile="${project.url}/${control.dir}/${gesture}ResultCommand.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/ServiceCommand.as" tofile="${project.url}/${control.dir}/${gesture}Command.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/ServiceEvent.as" tofile="${project.url}/${events.dir}/${gesture}Event.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/ServiceWithEvent.as" tofile="${project.url}/${services.dir}/${gesture}Service.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="services.dir " value="${services.dir}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/IService.as" tofile="${project.url}/${services.dir}/I${gesture}Service.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="services.dir " value="${services.dir}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register service with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: Add Services" value="// todo: Add Services${line.separator}
			        injector.mapSingletonOf( I${gesture}Service, ${gesture}Service );" />

		<echo>Register command with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: add commands" value="// todo: add commands${line.separator}
			        commandMap.mapEvent(${gesture}Event.${upperCaseGesture}_EVENT, ${gesture}Command, ${gesture}Event);${line.separator}
			        commandMap.mapEvent(${gesture}Event.${upperCaseGesture}_RESULT_EVENT, ${gesture}ResultCommand, ${gesture}Event);" />
	</target>

	<!-- create ValueObject class -->
	<target name="create-value-object">
		<echo>${log.value.object.message}</echo>

		<copy file="${robotlegs.templates.dir}/ValueObject.as" tofile="${project.url}/${model.dir}/${vo.dir}/${gesture}VO.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}VO" />
					<token key="vo.dir" value="${vo.dir}" />
					<token key="model.dir" value="${model.dir}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<!-- create view-mediator class -->
	<target name="create-view-mediator">
		<echo>${log.view.mediator.message}</echo>

		<convertToUpperCase property="upperCaseGesture" value="${gesture}" />
		<convertToLowerCase property="lowerCaseGesture" value="${gesture}" />

		<copy file="${robotlegs.templates.dir}/Mediator.as" tofile="${project.url}/${view.dir}/mediators/${gesture}Mediator.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="view.dir" value="${view.dir}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/View.mxml" tofile="${project.url}/${view.dir}/${gesture}View.mxml" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="view.dir" value="${view.dir}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register mediator with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: Add View" value="// todo: Add View${line.separator}
					      mediatorMap.mapView(${gesture}View, ${gesture}Mediator);" />

	</target>


	<!-- create presenter-view class -->
	<target name="create-presenter-view">
		<echo>${log.presenter.view.message}</echo>

		<convertToUpperCase property="upperCaseGesture" value="${gesture}" />
		<convertToLowerCase property="lowerCaseGesture" value="${gesture}" />

		<copy file="${robotlegs.templates.dir}/Presenter.as" tofile="${project.url}/${view.dir}/presenters/${gesture}Presenter.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="view.dir" value="${view.dir}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/View.mxml" tofile="${project.url}/${view.dir}/${gesture}View.mxml" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="view.dir" value="${view.dir}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register singleton with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: add singleton" value="// todo: add singleton${line.separator}
					      injector.mapSingleton( ${gesture}Presenter );" />

	</target>

	<!-- create model class -->
	<target name="create-model-class">
		<echo>${log.create.model.class.message}</echo>

		<copy file="${robotlegs.templates.dir}/Model.as" tofile="${project.url}/${model.dir}/${gesture}Model.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="model.dir" value="${model.dir}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register model with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: Add Model" value="// todo: Add Model${line.separator}
			        injector.mapSingleton( ${gesture}Model );" />

	</target>

	<!-- create service class -->
	<target name="create-service-class">
		<echo>${log.create.service.message}</echo>

		<copy file="${robotlegs.templates.dir}/Service.as" tofile="${project.url}/${services.dir}/${gesture}Service.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="services.dir " value="${services.dir}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/IService.as" tofile="${project.url}/${services.dir}/I${gesture}Service.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="services.dir " value="${services.dir}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register service with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// TODO: Add Services" value="// TODO: Add Services${line.separator}
			     injector.mapSingletonOf( I${gesture}Service, ${gesture}Service );" />

	</target>

	<!-- Add signal command user gesture -->
	<target name="add-signal-command-user-gesture">
		<echo>${log.add.signal.commmand.message}</echo>

		<copy file="${robotlegs.templates.dir}/Signal.as" tofile="${project.url}/${signals.dir}/${gesture}Signal.as">
			<filterchain>
				<replacetokens>
					<token key="year" value="${year}" />
					<token key="company.name" value="${company.name}" />
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}.${signals.dir}" />
					<token key="gesture" value="${gesture}" />
				</replacetokens>
			</filterchain>
		</copy>
		<copy file="${robotlegs.templates.dir}/SignalCommand.as" tofile="${project.url}/${control.dir}/${gesture}Command.as">
			<filterchain>
				<replacetokens>
					<token key="year" value="${year}" />
					<token key="company.name" value="${company.name}" />
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}.${control.dir}" />
					<token key="gesture" value="${gesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<replace file="${project.url}/${project.name}Context.as" token="// todo: add commands" value="// todo: add commands${line.separator}
			        signalCommandMap.mapSignalClass(${gesture}Signal, ${gesture}Command);" />
	</target>

	<!-- Add Signal Command User Gesture -->
	<target name="add-signal-command-param-user-gesture">
		<echo>${log.add.signal.commmand.param.message}</echo>

		<convertToCamelCase property="camelCaseGesture" value="${gesture}" />

		<copy file="${robotlegs.templates.dir}/SignalWithParam.as" tofile="${project.url}/${signals.dir}/${gesture}Signal.as">
			<filterchain>
				<replacetokens>
					<token key="year" value="${year}" />
					<token key="company.name" value="${company.name}" />
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}.${signals.dir}" />
					<token key="gesture" value="${gesture}" />
					<token key="camelCaseGesture" value="${camelCaseGesture}" />
					<token key="vo.dir" value="${vo.dir}" />
					<token key="model.dir" value="${model.dir}" />
				</replacetokens>
			</filterchain>
		</copy>
		<copy file="${robotlegs.templates.dir}/SignalCommandAndParam.as" tofile="${project.url}/${control.dir}/${gesture}Command.as">
			<filterchain>
				<replacetokens>
					<token key="year" value="${year}" />
					<token key="company.name" value="${company.name}" />
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="gesture" value="${gesture}" />
					<token key="camelCaseGesture" value="${camelCaseGesture}" />
					<token key="vo.dir" value="${vo.dir}" />
					<token key="model.dir" value="${model.dir}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/ValueObject.as" tofile="${project.url}/${model.dir}/${vo.dir}/${gesture}.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="vo.dir" value="${vo.dir}" />
					<token key="model.dir" value="${model.dir}" />
				</replacetokens>
			</filterchain>
		</copy>

		<replace file="${project.url}/${project.name}Context.as" token="// todo: add commands" value="// todo: add commands${line.separator}
			        signalCommandMap.mapSignalClass(${gesture}Signal, ${gesture}Command);" />
	</target>

	<target name="add-signal-command-service-user-gesture">

		<echo>${log.add.signal.commmand.services.message}</echo>

		<convertToUpperCase property="upperCaseGesture" value="${gesture}" />
		<convertToLowerCase property="lowerCaseGesture" value="${gesture}" />

		<copy file="${robotlegs.templates.dir}/SignalCommand.as" tofile="${project.url}/${control.dir}/${gesture}ResultCommand.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}.${control.dir}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}Result" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/ServiceSignalCommand.as" tofile="${project.url}/${control.dir}/${gesture}Command.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/Signal.as" tofile="${project.url}/${signals.dir}/${gesture}Signal.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}.${signals.dir}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/Signal.as" tofile="${project.url}/${signals.dir}/${gesture}ResultSignal.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}.${signals.dir}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}Result" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/ServiceWithSignal.as" tofile="${project.url}/${services.dir}/${gesture}Service.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="services.dir " value="${services.dir}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/IService.as" tofile="${project.url}/${services.dir}/I${gesture}Service.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="services.dir " value="${services.dir}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register service with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: Add Services" value="// todo: Add Services${line.separator}
			        injector.mapSingletonOf( I${gesture}Service, ${gesture}Service );" />

		<echo>Register command with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: add commands" value="// todo: add commands${line.separator}
	          signalCommandMap.mapSignalClass(${gesture}Signal, ${gesture}Command);${line.separator}
	          signalCommandMap.mapSignalClass(${gesture}ResultSignal, ${gesture}ResultCommand);" />
	</target>

	<!-- private -->
	<scriptdef name="convertToUpperCase" language="javascript">
		<attribute name="property" />
		<attribute name="value" />
		project.setNewProperty( attributes.get("property"), attributes.get("value").toUpperCase() );
	</scriptdef>

	<scriptdef name="convertToLowerCase" language="javascript">
		<attribute name="property" />
		<attribute name="value" />
		project.setNewProperty( attributes.get("property"), attributes.get("value").toLowerCase() );
	</scriptdef>

	<scriptdef name="convertToPascalCase" language="javascript">
		<attribute name="property" />
		<attribute name="value" />
		val = attributes.get("value");
		val = val.substr(0,1).toUpperCase() + val.substr(1);
		project.setNewProperty( attributes.get("property"), val);
	</scriptdef>

	<scriptdef name="convertToCamelCase" language="javascript">
		<attribute name="property" />
		<attribute name="value" />
		val = attributes.get("value");
		val = val.substr(0,1).toLowerCase() + val.substr(1);
		project.setNewProperty( attributes.get("property"), val);
	</scriptdef>

	<scriptdef name="setTabValue" language="javascript">
		<attribute name="property" />
		project.setNewProperty( attributes.get("property"), "\t");
	</scriptdef>

</project>